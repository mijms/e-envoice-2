import requests
import base64
import uuid

# Constants
BINARY_SECURITY_TOKEN_FILE = 'binarySecurityToken.txt'
SECRET_FILE = 'secret.txt'
INVOICE_HASH_FILE = 'invoicehash.txt'
INVOICE_FILE = 'out.xml'
INVOICE_REPORTING_URL = 'https://gw-fatoora.zatca.gov.sa/e-invoicing/core/invoices/reporting/single'

# Load files
with open(BINARY_SECURITY_TOKEN_FILE, "rb") as file:
    binarySecurityToken = file.read().strip()

with open(SECRET_FILE, "rb") as file:
    secret = file.read().strip()

with open(INVOICE_HASH_FILE, "rb") as file:
    invoicehash = file.read().decode('utf-8').strip()

with open(INVOICE_FILE, "rb") as file:
    invoice = base64.b64encode(file.read()).decode('utf-8').strip()

# Prepare request
auth_str = f'{binarySecurityToken}:{secret}'
auth2 = base64.b64encode(auth_str.encode('utf-8'))
print(auth2)

headers = {
    'accept': 'application/json',
    'accept-language': 'en',
    'Clearance-Status': '0',
    'Accept-Version': 'V2',
    'Content-Type': 'application/json',
    'Authorization': f'Basic {auth2}',
}

json_data = {
    'invoiceHash': invoicehash,
    'uuid': str(uuid.uuid4()),
    'invoice': invoice,
}

# Send request
try:
    response = requests.post(
        INVOICE_REPORTING_URL,
        headers=headers,
        json=json_data,
    )
    response.raise_for_status()
    print(response.json())
except requests.exceptions.HTTPError as e:
    if e.response.status_code == 401:
        print(f'Error 401: Invalid credentials')
    else:
        print(f'Error {e.response.status_code}: {e.response.text}')
except requests.exceptions.RequestException as e:
    print(f'Error: {e}')

###################################################################################################
'''
headers = {
    'accept': 'application/json',
    'accept-language': 'en',
    'Clearance-Status': '0',
    'Accept-Version': 'V2',
    'Content-Type': 'application/json',
}

json_data = {
    'invoiceHash': 'PEx8bNFcEMEpHzUVvQntQI6ot8eFqTT/l59b+H1HqX4=',
    'uuid': '16e78469-64af-406d-9cfd-895e724198f0',
    'invoice': '',
}

response = requests.post(
    'https://gw-fatoora.zatca.gov.sa/e-invoicing/developer-portal/invoices/clearance/single',
    headers=headers,
    json=json_data,
)
'''
